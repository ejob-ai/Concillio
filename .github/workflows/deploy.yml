name: CI

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: write
  statuses: write
  pull-requests: write

env:
  NODE_VERSION: 20
  PWDEBUG: '0'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Mark repo safe for git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install deps
        run: npm ci

      - name: Unit tests (Vitest, jsdom)
        env:
          CI: true
        run: npm run test:unit

      - name: Build
        run: npm run build

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-bundle
          path: dist
          if-no-files-found: error

  deploy-preview:
    if: github.event_name == 'pull_request'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: preview
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    continue-on-error: ${{ matrix.browser != 'chromium' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Mark repo safe for git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-bundle
          path: dist

      - name: Deploy to Cloudflare Pages (preview)
        id: pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: concillio
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

      - name: Export BASE_URL
        run: |
          echo "BASE_URL=${{ steps.pages.outputs.url }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=preview" >> $GITHUB_ENV
      # üîΩ Nytt: tydlig sammanfattning med klickbar l√§nk
      - name: Summarize preview deployment (with sticky PR comment)
        if: always()
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          {
            echo "## ‚úÖ Preview deployment";
            echo "";
            echo "- **Environment**: preview";
            echo "- **Branch**: \`$BRANCH\`";
            echo "- **Commit**: \`${GITHUB_SHA}\`";
            echo "";
            echo "[Open preview](${BASE_URL})";
            echo "";
            echo "> E2E matrix: \`chromium\`, \`firefox\`, \`webkit\` (FF/WebKit soft-fail).";
          } >> $GITHUB_STEP_SUMMARY
      - name: Comment preview URL on PR (sticky)
        if: ${{ github.event_name == 'pull_request' && env.BASE_URL != '' && matrix.browser == 'chromium' }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const marker = '<!-- concillio-preview-url -->';
            const baseUrl = process.env.BASE_URL || '';
            const branch  = process.env.GITHUB_HEAD_REF || (process.env.GITHUB_REF || '').replace('refs/heads/','');
            const body = `${marker}
            ‚úÖ **Preview deployed**
            - **Environment**: preview
            - **Branch**: \`${branch}\`
            - **Commit**: \`${process.env.GITHUB_SHA}\`

            [Open preview](${baseUrl})

            _E2E matrix_: \`chromium\`, \`firefox\`, \`webkit\` (FF/WebKit soft-fail)`;

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;
            if (!issue_number) { core.info('No PR number detected; skipping sticky comment'); return; }

            const comments = await github.paginate(github.rest.issues.listComments, { owner, repo, issue_number, per_page: 100 });
            const existing = comments.find(c => (c.body || '').includes(marker));
            if (existing) {
              await github.rest.issues.updateComment({ owner, repo, comment_id: existing.id, body });
              core.info('Updated existing sticky comment');
            } else {
              await github.rest.issues.createComment({ owner, repo, issue_number, body });
              core.info('Created new sticky comment');
            }
      - name: Assert BASE_URL is set
        run: |
          echo "BASE_URL=$BASE_URL"
          test -n "$BASE_URL"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install deps for E2E
        run: npm ci

      - name: Deploy checks (preview)
        continue-on-error: true
        env:
          BASE_URL: ${{ env.BASE_URL }}
          CI: true
          EXPECT_TEST_HELPERS: "1"
          TEST_LOGIN_TOKEN: ${{ secrets.TEST_LOGIN_TOKEN }}
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
          # Provide Stripe secrets only to the deploy-check step in preview
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY_PREVIEW }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET_PREVIEW }}
        run: |
          bash scripts/deploy-check.sh

      - name: Cache Playwright (browser cache)
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: pw-${{ runner.os }}-${{ matrix.browser }}

      - name: Install Playwright browser (${{ matrix.browser }})
        run: npx playwright install --with-deps ${{ matrix.browser }}

      # Resolve latest preview URL for this branch using Cloudflare API
      - name: Resolve latest preview BASE_URL from Cloudflare API
        env:
          CF_API_TOKEN: ${{ secrets.CF_API_TOKEN }}
          CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
        run: |
          set -euo pipefail
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          echo "Resolving preview URL for branch: $BRANCH"

          URL=$(curl -fsSL \
            -H "Authorization: Bearer ${CF_API_TOKEN}" \
            "https://api.cloudflare.com/client/v4/accounts/${CF_ACCOUNT_ID}/pages/projects/concillio/deployments?branch=${BRANCH}&per_page=1" \
            | jq -r '.result[0].url')

          if [ -z "${URL}" ] || [ "${URL}" = "null" ]; then
            echo "Kunde inte hitta preview-URL f√∂r ${BRANCH}"
            exit 1
          fi

          echo "BASE_URL=${URL}" | tee -a "$GITHUB_ENV"

      - name: Smoke test (preview)
        env:
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          echo "Preview BASE_URL=$BASE_URL"
          curl -fS -L \
            -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID" \
            -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET" \
            "$BASE_URL/" -o /dev/null
          curl -fS \
            -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID" \
            -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET" \
            "$BASE_URL/static/favicon.ico" -o /dev/null

      - name: Run E2E smoke (${{ matrix.browser }})
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TEST_LOGIN_TOKEN: ${{ secrets.TEST_LOGIN_TOKEN }}
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
          CI: true
        run: |
          ! grep -R "from '@jest/globals'\|from 'jest'\|expect\.extend(" tests/e2e \
            || (echo 'Do not use Jest in E2E' && exit 1)
          node -v
          node -p "require.resolve('scrypt-js')"
          node -p "try{console.log(require('scrypt-js'))}catch(e){console.error(e);process.exit(1)}"
          npm run test:e2e:${{ matrix.browser }}

      - name: Upload Playwright report (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report
          if-no-files-found: ignore

      - name: Upload test-results (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results
            junit.xml
          retention-days: 7

  deploy-production:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    continue-on-error: ${{ matrix.browser == 'webkit' && github.ref != 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Mark repo safe for git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-bundle
          path: dist

      - name: Deploy to Cloudflare Pages (production)
        id: pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: concillio
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Export BASE_URL
        run: |
          echo "BASE_URL=https://concillio.pages.dev" >> $GITHUB_ENV
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
      # üîΩ Nytt: tydlig sammanfattning med klickbar l√§nk
      - name: Summarize production deployment
        if: always()
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          {
            echo "## üöÄ Production deployment";
            echo "";
            echo "- **Environment**: production";
            echo "- **Branch**: \`$BRANCH\`";
            echo "- **Commit**: \`${GITHUB_SHA}\`";
            echo "";
            echo "[Open production site](${BASE_URL})";
            echo "";
            echo "> E2E matrix: \`chromium\`, \`firefox\`, \`webkit\` (alla blockerande).";
          } >> $GITHUB_STEP_SUMMARY
      - name: Assert BASE_URL is set
        run: |
          echo "BASE_URL=$BASE_URL"
          test -n "$BASE_URL"

      - name: Checkout repo for E2E
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Mark repo safe for git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install deps for E2E
        run: npm ci

      - name: Debug CF Access headers (production)
        if: ${{ always() }}
        env:
          BASE_URL: ${{ env.BASE_URL }}
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
        run: |
          set -euo pipefail
          id_trim="$(echo -n "${CF_ACCESS_CLIENT_ID}" | tr -d '\r\n' )"
          sec_trim="$(echo -n "${CF_ACCESS_CLIENT_SECRET}" | tr -d '\r\n' )"
          id_mask="${id_trim:0:6}...${id_trim: -6} (len=${#id_trim})"
          se_mask="${sec_trim:0:6}...${sec_trim: -6} (len=${#sec_trim})"
          echo "BASE_URL=${BASE_URL}"
          echo "ID=${id_mask}"
          echo "SECRET=${se_mask}"
          echo "== curl /cdn-cgi/access/certs =="
          curl -sS -D - -o /dev/null "${BASE_URL%/}/cdn-cgi/access/certs" | head -n1
          echo "== curl / (with headers) =="
          curl -sS -D - -o /dev/null \
            -H "CF-Access-Client-Id: ${id_trim}" \
            -H "CF-Access-Client-Secret: ${sec_trim}" \
            "${BASE_URL%/}/" | head -n1
          echo "== curl /static/favicon.ico (with headers) =="
          curl -sS -D - -o /dev/null \
            -H "CF-Access-Client-Id: ${id_trim}" \
            -H "CF-Access-Client-Secret: ${sec_trim}" \
            "${BASE_URL%/}/static/favicon.ico" | head -n1

      - name: Deploy checks (production)
        env:
          BASE_URL: ${{ env.BASE_URL }}
          CI: true
          EXPECT_TEST_HELPERS: "0"
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
        run: |
          bash scripts/deploy-check.sh

      - name: Cache Playwright (browser cache)
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: pw-${{ runner.os }}-${{ matrix.browser }}

      - name: Install Playwright browser (${{ matrix.browser }})
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E smoke (${{ matrix.browser }})
        env:
          BASE_URL: ${{ env.BASE_URL }}
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
          CI: true
        run: |
          ! grep -R "from '@jest/globals'\|from 'jest'\|expect\.extend(" tests/e2e \
            || (echo 'Do not use Jest in E2E' && exit 1)
          node -v
          node -p "require.resolve('scrypt-js')"
          node -p "try{console.log(require('scrypt-js'))}catch(e){console.error(e);process.exit(1)}"
          # Tests that depend on helpers should be skipped in prod
          npm run test:e2e:${{ matrix.browser }}

      - name: Upload Playwright report (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report
          if-no-files-found: ignore

      - name: Upload test-results (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results
            junit.xml
          retention-days: 7

  aggregate-preview-report:
    if: ${{ always() && github.event_name == 'pull_request' }}
    needs: deploy-preview
    runs-on: ubuntu-latest
    steps:
      - name: Download Playwright reports (all browsers)
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: aggregated-reports
          merge-multiple: true
      - name: Download test results (all browsers)
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: aggregated-reports
          merge-multiple: true
      - name: Upload aggregated report artifact
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-aggregated
          path: aggregated-reports
          if-no-files-found: ignore
      - name: Summary with links
        run: |
          echo "### Aggregated E2E Reports (Preview)" >> "$GITHUB_STEP_SUMMARY"
          echo "- Combined artifact: playwright-reports-aggregated" >> "$GITHUB_STEP_SUMMARY"

  aggregate-production-report:
    if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: deploy-production
    runs-on: ubuntu-latest
    steps:
      - name: Download Playwright reports (all browsers)
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: aggregated-reports
          merge-multiple: true
      - name: Download test results (all browsers)
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: aggregated-reports
          merge-multiple: true
      - name: Upload aggregated report artifact
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-aggregated
          path: aggregated-reports
          if-no-files-found: ignore
      - name: Summary with links
        run: |
          echo "### Aggregated E2E Reports (Production)" >> "$GITHUB_STEP_SUMMARY"
          echo "- Combined artifact: playwright-reports-aggregated" >> "$GITHUB_STEP_SUMMARY"
