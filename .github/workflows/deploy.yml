name: CI

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  deployments: write
  statuses: write
  pull-requests: write

env:
  NODE_VERSION: 20

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Mark repo safe for git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install deps
        run: npm ci

      - name: Unit tests (Vitest, jsdom)
        env:
          CI: true
        run: npm run test:unit

      - name: Build
        run: npm run build

      - name: Upload dist artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist-bundle
          path: dist
          if-no-files-found: error

  deploy-preview:
    if: github.event_name == 'pull_request'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: preview
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    continue-on-error: ${{ matrix.browser != 'chromium' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Mark repo safe for git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-bundle
          path: dist

      - name: Deploy to Cloudflare Pages (preview)
        id: pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: concillio
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}

      - name: Export BASE_URL
        run: |
          echo "BASE_URL=${{ steps.pages.outputs.url }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=preview" >> $GITHUB_ENV
      # ðŸ”½ Nytt: tydlig sammanfattning med klickbar lÃ¤nk
      - name: Summarize preview deployment (with sticky PR comment)
        if: always()
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"
          {
            echo "## âœ… Preview deployment";
            echo "";
            echo "- **Environment**: preview";
            echo "- **Branch**: \`$BRANCH\`";
            echo "- **Commit**: \`${GITHUB_SHA}\`";
            echo "";
            echo "[Open preview](${BASE_URL})";
            echo "";
            echo "> E2E matrix: \`chromium\`, \`firefox\`, \`webkit\` (FF/WebKit soft-fail).";
          } >> $GITHUB_STEP_SUMMARY
      - name: Assert BASE_URL is set
        run: |
          echo "BASE_URL=$BASE_URL"
          test -n "$BASE_URL"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install deps for E2E
        run: npm ci

      - name: Deploy checks (preview)
        env:
          BASE_URL: ${{ env.BASE_URL }}
          CI: true
          EXPECT_TEST_HELPERS: "1"
          TEST_LOGIN_TOKEN: ${{ secrets.TEST_LOGIN_TOKEN }}
        run: |
          bash scripts/deploy-check.sh

      - name: Cache Playwright (browser cache)
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: pw-${{ runner.os }}-${{ matrix.browser }}

      - name: Install Playwright browser (${{ matrix.browser }})
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E smoke (${{ matrix.browser }})
        env:
          BASE_URL: ${{ env.BASE_URL }}
          TEST_LOGIN_TOKEN: ${{ secrets.TEST_LOGIN_TOKEN }}
          CI: true
        run: |
          npx playwright test --project=${{ matrix.browser }}

      - name: Upload Playwright report (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report
          if-no-files-found: ignore

      - name: Upload test-results (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}
          path: test-results
          if-no-files-found: ignore

  deploy-production:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: production
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    continue-on-error: ${{ matrix.browser == 'webkit' && github.ref != 'refs/heads/main' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Mark repo safe for git
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Download dist artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-bundle
          path: dist

      - name: Deploy to Cloudflare Pages (production)
        id: pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: concillio
          directory: dist
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          branch: main

      - name: Export BASE_URL
        run: |
          echo "BASE_URL=${{ steps.pages.outputs.url }}" >> $GITHUB_ENV
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
      # ðŸ”½ Nytt: tydlig sammanfattning med klickbar lÃ¤nk
      - name: Summarize production deployment
        if: always()
        run: |
          BRANCH="${GITHUB_REF#refs/heads/}"
          {
            echo "## ðŸš€ Production deployment";
            echo "";
            echo "- **Environment**: production";
            echo "- **Branch**: \`$BRANCH\`";
            echo "- **Commit**: \`${GITHUB_SHA}\`";
            echo "";
            echo "[Open production site](${BASE_URL})";
            echo "";
            echo "> E2E matrix: \`chromium\`, \`firefox\`, \`webkit\` (alla blockerande).";
          } >> $GITHUB_STEP_SUMMARY
      - name: Assert BASE_URL is set
        run: |
          echo "BASE_URL=$BASE_URL"
          test -n "$BASE_URL"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install deps for E2E
        run: npm ci

      - name: Deploy checks (production)
        env:
          BASE_URL: ${{ env.BASE_URL }}
          CI: true
          EXPECT_TEST_HELPERS: "0"
        run: |
          bash scripts/deploy-check.sh

      - name: Cache Playwright (browser cache)
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: pw-${{ runner.os }}-${{ matrix.browser }}

      - name: Install Playwright browser (${{ matrix.browser }})
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Run E2E smoke (${{ matrix.browser }})
        env:
          BASE_URL: ${{ env.BASE_URL }}
          CI: true
        run: |
          # Tests that depend on helpers should be skipped in prod
          npx playwright test --project=${{ matrix.browser }}

      - name: Upload Playwright report (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report
          if-no-files-found: ignore

      - name: Upload test-results (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.browser }}
          path: test-results
          if-no-files-found: ignore

  aggregate-preview-report:
    if: ${{ always() && github.event_name == 'pull_request' }}
    needs: deploy-preview
    runs-on: ubuntu-latest
    steps:
      - name: Download Playwright reports (all browsers)
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: aggregated-reports
          merge-multiple: true
      - name: Download test results (all browsers)
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: aggregated-reports
          merge-multiple: true
      - name: Upload aggregated report artifact
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-aggregated
          path: aggregated-reports
          if-no-files-found: ignore
      - name: Summary with links
        run: |
          echo "### Aggregated E2E Reports (Preview)" >> "$GITHUB_STEP_SUMMARY"
          echo "- Combined artifact: playwright-reports-aggregated" >> "$GITHUB_STEP_SUMMARY"

  aggregate-production-report:
    if: ${{ always() && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    needs: deploy-production
    runs-on: ubuntu-latest
    steps:
      - name: Download Playwright reports (all browsers)
        uses: actions/download-artifact@v4
        with:
          pattern: playwright-report-*
          path: aggregated-reports
          merge-multiple: true
      - name: Download test results (all browsers)
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: aggregated-reports
          merge-multiple: true
      - name: Upload aggregated report artifact
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-aggregated
          path: aggregated-reports
          if-no-files-found: ignore
      - name: Summary with links
        run: |
          echo "### Aggregated E2E Reports (Production)" >> "$GITHUB_STEP_SUMMARY"
          echo "- Combined artifact: playwright-reports-aggregated" >> "$GITHUB_STEP_SUMMARY"
