name: E2E Smoke on main

permissions:
  contents: read
  deployments: write
  statuses: write
  checks: write

on:
  push:
    branches: [ main ]

concurrency:
  group: pages-prod-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: 20

jobs:
  e2e:
    name: E2E Smoke (main)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    env:
      BASE_URL:               ${{ secrets.SMOKE_BASE_URL }}
      CF_ACCESS_CLIENT_ID:     ${{ secrets.CF_ACCESS_CLIENT_ID_SMOKE }}
      CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET_SMOKE }}
      TEST_LOGIN_TOKEN:        ${{ secrets.TEST_LOGIN_TOKEN }}
      JUNIT_FILE:              junit/junit-${{ matrix.browser }}.xml
      PLAYWRIGHT_HTML_REPORT:  playwright-report-${{ matrix.browser }}
    steps:
      - uses: actions/checkout@v4

      - name: Locate project root (force repo root)
        id: root
        shell: bash
        run: |
          set -euo pipefail
          echo "root=." >> "$GITHUB_OUTPUT"
          echo "Using repo root as canonical Node project dir"

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ${{ steps.root.outputs.root }}/package-lock.json

      - name: Install deps & browsers
        working-directory: ${{ steps.root.outputs.root }}
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; else npm install; fi
          npx playwright install --with-deps

      - name: Build
        working-directory: ${{ steps.root.outputs.root }}
        run: npm run build

       - name: Access preflight (HEAD + Location check, smoke)
        shell: bash
        env:
          SMOKE_URL: ${{ secrets.SMOKE_BASE_URL }}
          CF_ACCESS_CLIENT_ID_SMOKE: ${{ secrets.CF_ACCESS_CLIENT_ID_SMOKE }}
          CF_ACCESS_CLIENT_SECRET_SMOKE: ${{ secrets.CF_ACCESS_CLIENT_SECRET_SMOKE }}
        run: |
          set -euo pipefail

          echo "=== Unauthenticated preflight ==="

          probe() {
            curl -s -I -o /dev/null -D - "$1" \
            | awk 'BEGIN{c="";l=""} tolower($1) ~ /^http\// {c=$2} tolower($1)=="location:" {l=$2} END{printf "%s %s", c, l}'
          }

          normalize() {
            base="$1"; loc="$2"
            if [[ "$loc" =~ ^https?:// ]]; then printf "%s" "$loc"; return; fi
            if [[ "$loc" =~ ^/ ]]; then
              origin="$(printf "%s" "$base" | sed -E 's#^([a-z]+://[^/]+).*#\1#I')"
              printf "%s%s" "$origin" "$loc"; return
            fi
            printf "%s" "$base"
          }

          url="${SMOKE_URL:-}"
          if [[ -z "$url" ]]; then
            echo "Secret SMOKE_BASE_URL is not set"
            exit 1
          fi

          # Hop 1
          read -r code1 loc1 <<<"$(probe "$url")"
          echo "hop1: $code1 $loc1"
          lower1="$(printf "%s" "$loc1" | tr '[:upper:]' '[:lower:]')"

          # Direkt OK
          if [[ "$code1" =~ ^(200|204)$ ]]; then
            echo "200/204 on first hop – OK"
            exit 0
          fi

          # 3xx → Access login eller https/kanonisk → 200
          if [[ "$code1" =~ ^(301|302|303|308)$ ]]; then
            if [[ "$lower1" == *"/cdn-cgi/access/login"* ]]; then
              echo "Access login on first hop – OK"
              exit 0
            fi

            next="$(normalize "$url" "$loc1")"
            read -r code2 loc2 <<<"$(probe "$next")"
            echo "hop2: $code2 $loc2"
            lower2="$(printf "%s" "$loc2" | tr '[:upper:]' '[:lower:]')"

            if [[ "$code2" =~ ^(200|204)$ ]]; then
              echo "Canonical/HTTPS redirect → 200 – OK"
              exit 0
            fi
            if [[ "$code2" =~ ^(301|302|303|308)$ && "$lower2" == *"/cdn-cgi/access/login"* ]]; then
              echo "Access login on second hop – OK"
              exit 0
            fi
          fi

          # Valfri autentiserad probe (om Access-secrets finns)
          if [[ -n "${CF_ACCESS_CLIENT_ID_SMOKE:-}" && -n "${CF_ACCESS_CLIENT_SECRET_SMOKE:-}" ]]; then
            echo "=== Authenticated probe ==="
            read -r codeA locA <<<"$(curl -s -I -o /dev/null -D - \
              -H "CF-Access-Client-Id: $CF_ACCESS_CLIENT_ID_SMOKE" \
              -H "CF-Access-Client-Secret: $CF_ACCESS_CLIENT_SECRET_SMOKE" \
              "$url" | awk 'BEGIN{c="";l=""} tolower($1) ~ /^http\// {c=$2} tolower($1)=="location:" {l=$2} END{printf "%s %s", c, l}')"
            echo "auth: $codeA $locA"
            if [[ "$codeA" =~ ^(200|204)$ ]]; then
              echo "Authenticated 200/204 – OK"
              exit 0
            fi
          fi

          echo "Preflight failed. Expected 200/204, HTTPS/canonical → 200, or Access login redirect; got: hop1=$code1 loc1=$loc1"
          exit 1

      - name: Run Playwright (${{ matrix.browser }})
        working-directory: ${{ steps.root.outputs.root }}
        env:
          BASE_URL:               ${{ secrets.SMOKE_BASE_URL }}
          CF_ACCESS_CLIENT_ID:     ${{ secrets.CF_ACCESS_CLIENT_ID_SMOKE }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET_SMOKE }}
          TEST_LOGIN_TOKEN:        ${{ secrets.TEST_LOGIN_TOKEN }}
        run: |
          set -euo pipefail
          CONFIG="$GITHUB_WORKSPACE/playwright.config.ts"
          echo "Using config: $CONFIG"
          npx playwright test tests/e2e/preview-validation.spec.ts \
            --project=${{ matrix.browser }} \
            --config="$CONFIG"

      - name: Upload JUnit (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-${{ matrix.browser }}
          path: junit/junit-${{ matrix.browser }}.xml
          if-no-files-found: ignore

      - name: Upload HTML report (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report-${{ matrix.browser }}
          if-no-files-found: ignore

  junit-summary:
    name: E2E Smoke on main – Summary
    needs: e2e
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: junit-merged
      - uses: mikepenz/action-junit-report@v4
        with:
          report_paths: 'junit-merged/**/*.xml'
          check_name: 'E2E Smoke on main – Summary'
          fail_on_failure: false
          include_passed: true
