name: E2E (preview)

permissions:
  contents: read
  checks: write

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

concurrency:
  group: pages-preview-v2-${{ github.ref }}
  cancel-in-progress: true

jobs:
  summary_policy:
    name: E2E (preview) ‚Äì Summary
    if: ${{ github.event_name == 'pull_request' && (github.event.pull_request.head.repo.fork || github.actor == 'dependabot[bot]') }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "‚úÖ E2E/preview skipped by policy" >> "$GITHUB_STEP_SUMMARY"
          echo "‚û°Ô∏è  Reason: fork or Dependabot PR" >> "$GITHUB_STEP_SUMMARY"
          echo "üîí No secrets available for this context." >> "$GITHUB_STEP_SUMMARY"

  preview:
    name: Deploy PR Preview
    # Skip preview deploy for forks and Dependabot PRs (no secrets).
    if: >
      github.event_name != 'pull_request' ||
      (!github.event.pull_request.head.repo.fork && github.actor != 'dependabot[bot]')
    runs-on: ubuntu-latest
    outputs:
      pages_url: ${{ steps.resolve_url.outputs.url }}
    steps:
      - uses: actions/checkout@v5

      - name: Locate project root (force repo root)
        id: root
        shell: bash
        run: |
          set -euo pipefail
          echo "root=." >> "$GITHUB_OUTPUT"
          echo "Using repo root as canonical Node project dir"

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ steps.root.outputs.root }}/package-lock.json

      - name: Install deps
        working-directory: ${{ steps.root.outputs.root }}
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      # --- Playwright browser cache ---
      - name: Detect Playwright version
        id: pw-version
        working-directory: ${{ steps.root.outputs.root }}
        run: |
          set -euo pipefail
          # 1) F√∂rs√∂k l√§sa installerad playwright-core-version (stabilast f√∂r cache)
          ver="$(node -p "try{require('playwright-core/package.json').version}catch(e){''}")"
          # 2) Fallback: package.json (@playwright/test i devDeps/Deps)
          if [ -z "${ver}" ]; then
            ver="$(node -p "try{const p=require('./package.json');(p.devDependencies&&p.devDependencies['@playwright/test'])||(p.dependencies&&p.dependencies['@playwright/test'])||''}catch(e){''}")"
            ver="${ver#^}"; ver="${ver#~}"
          fi
          # 3) Sista fallback: CLI
          if [ -z "${ver}" ]; then
            ver="$(npx --yes playwright --version 2>/dev/null | awk '{print $NF}')"
          fi
          echo "version=${ver:-unknown}" >> "$GITHUB_OUTPUT"

      - name: Cache Playwright browsers
        id: pw-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.pw-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright OS deps (always)
        working-directory: ${{ steps.root.outputs.root }}
        run: |
          set -euo pipefail
          npx playwright install-deps

      - name: Install Playwright browsers (on cache miss)
        if: steps.pw-cache.outputs.cache-hit != 'true'
        working-directory: ${{ steps.root.outputs.root }}
        run: |
          set -euo pipefail
          npx playwright install

      - name: Ensure report dirs
        run: mkdir -p junit

        # Playwright beh√∂ver sina browsers i CI
      # - name: Skip: browsers already installed
      #   run: echo "Browsers were installed in the previous step"

      - name: Build
        working-directory: ${{ steps.root.outputs.root }}
        run: npm run build

      - name: Publish to Cloudflare Pages
        id: pages
        uses: cloudflare/pages-action@v1
        with:
          apiToken:    ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId:   ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          projectName: concillio
          directory:   ${{ steps.root.outputs.root }}/dist
          wranglerVersion: "3.78.0"

      - name: Resolve preview URL
        id: resolve_url
        run: |
          url="${{ steps.pages.outputs.alias || steps.pages.outputs.url }}"
          # normalisera trailing slash
          url="${url%/}/"
          echo "url=$url" >> "$GITHUB_OUTPUT"

      # OBLIGATORISK f√∂r interna PR:er ‚Äì HEAD + Location-semantik
      - name: Access preflight (HEAD + Location check, preview)
        if: ${{ github.event_name == 'pull_request' && (
                github.event.pull_request.head.repo.full_name == github.repository ||
                github.event.pull_request.head.repo.owner.login == github.repository_owner
             ) }}
        env:
          PREVIEW_URL: ${{ steps.resolve_url.outputs.url }}
        shell: bash
        run: |
          set -euo pipefail
          # Till√•t 301/302/303 -> /cdn-cgi/access/login (absolut eller relativ Location)
          # H√§mta ENDAST f√∂rsta svaret (ingen -L)
          read -r code loc_hdr < <(
            curl -sI "$PREVIEW_URL" \
            | awk 'BEGIN{IGNORECASE=1} /^HTTP/{c=$2} /^location:/{l=$2} END{print c, l}' \
            | tr -d "\r"
          )
          if [[ "$code" =~ ^30[123]$ ]] && [[ "$loc_hdr" == *"/cdn-cgi/access/login"* ]]; then
            echo "Access preflight OK (unauthenticated 30x to login)"
          else
            echo "Expected unauthenticated 30x -> /cdn-cgi/access/login, got: $code $loc_hdr"
            exit 1
          fi

          # (valfritt) Auth-probe kan ligga kvar som innan om ni vill
          # read -r code_auth loc_auth <<<"$(
          #   curl -sI "$u" \
          #     -H "CF-Access-Client-Id: ${{ secrets.CF_ACCESS_CLIENT_ID }}" \
          #     -H "CF-Access-Client-Secret: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}" \
          #   | awk 'BEGIN{c="";l=""}/^HTTP\//{c=$2}tolower($1)=="location:"{l=$2}END{printf "%s %s", c, l}'
          # )"
          # [[ "$code_auth" =~ ^20[04]$ || -z "$loc_auth" ]] && echo "Auth OK ($code_auth $loc_auth)" || { echo "Unexpected redirect while authenticated: $code_auth $loc_auth"; exit 1; }

  e2e:
    name: E2E (preview)
    needs: preview
    if: >
      github.event_name != 'pull_request' ||
      (!github.event.pull_request.head.repo.fork && github.actor != 'dependabot[bot]')
    runs-on: ubuntu-latest
    env:
      # matrix/browser-specific outputs written by our config
      MATRIX_BROWSER: ${{ matrix.browser }}
      JUNIT_FILE: junit/junit-${{ matrix.browser }}.xml
      HTML_DIR: playwright-report-${{ matrix.browser }}
      # preview URLs surfaced by the deploy job
      PREVIEW_URL: ${{ needs.preview.outputs.pages_url }}
      BASE_URL:     ${{ needs.preview.outputs.pages_url }}
      TEST_CONTEXT: "preview"
      # optional Access creds (not required; tests still pass unauthenticated)
      CF_ACCESS_CLIENT_ID:     ${{ secrets.CF_ACCESS_CLIENT_ID }}
      CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]

    steps:
      - uses: actions/checkout@v5

      - name: Locate project root (force repo root)
        id: root
        shell: bash
        run: |
          set -euo pipefail
          echo "root=." >> "$GITHUB_OUTPUT"
          echo "Using repo root as canonical Node project dir"

      - uses: actions/setup-node@v6
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: ${{ steps.root.outputs.root }}/package-lock.json

      - name: Install deps
        working-directory: ${{ steps.root.outputs.root }}
        run: |
          set -euo pipefail
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      # --- Playwright browser cache ---
      - name: Detect Playwright version
        id: pw-version
        working-directory: ${{ steps.root.outputs.root }}
        run: |
          set -euo pipefail
          # 1) F√∂rs√∂k l√§sa installerad playwright-core-version (stabilast f√∂r cache)
          ver="$(node -p "try{require('playwright-core/package.json').version}catch(e){''}")"
          # 2) Fallback: package.json (@playwright/test i devDeps/Deps)
          if [ -z "${ver}" ]; then
            ver="$(node -p "try{const p=require('./package.json');(p.devDependencies&&p.devDependencies['@playwright/test'])||(p.dependencies&&p.dependencies['@playwright/test'])||''}catch(e){''}")"
            ver="${ver#^}"; ver="${ver#~}"
          fi
          # 3) Sista fallback: CLI
          if [ -z "${ver}" ]; then
            ver="$(npx --yes playwright --version 2>/dev/null | awk '{print $NF}')"
          fi
          echo "version=${ver:-unknown}" >> "$GITHUB_OUTPUT"

      - name: Cache Playwright browsers
        id: pw-cache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.pw-version.outputs.version }}
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install Playwright OS deps (always)
        working-directory: ${{ steps.root.outputs.root }}
        run: |
          set -euo pipefail
          npx playwright install-deps

      - name: Install Playwright browsers (on cache miss)
        if: steps.pw-cache.outputs.cache-hit != 'true'
        working-directory: ${{ steps.root.outputs.root }}
        run: |
          set -euo pipefail
          npx playwright install

      - name: Ensure report dirs
        run: mkdir -p junit

      - name: Run Playwright (preview)
        working-directory: ${{ steps.root.outputs.root }}
        env:
          BASE_URL: ${{ needs.preview.outputs.pages_url }}
          CF_ACCESS_CLIENT_ID: ${{ secrets.CF_ACCESS_CLIENT_ID }}
          CF_ACCESS_CLIENT_SECRET: ${{ secrets.CF_ACCESS_CLIENT_SECRET }}
          TEST_LOGIN_TOKEN: ${{ secrets.TEST_LOGIN_TOKEN }}
          TEST_CONTEXT: preview
        run: |
          set -euo pipefail

          # Isolera fr√•n Vitest s√• dess expect inte kan laddas av misstag
          rm -rf node_modules/@vitest/expect node_modules/vitest || true

          mkdir -p junit
          npx playwright test --config="playwright.config.ts" --project="${{ matrix.browser }}"

      - name: Upload JUnit & HTML reports (${{ matrix.browser }})
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: |
            ${{ env.JUNIT_FILE }}
            ${{ env.HTML_DIR }}
          retention-days: 7
          if-no-files-found: warn

      - name: Publish E2E summary (${{ matrix.browser }})
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          echo "### E2E (${{ matrix.browser }})" >> "$GITHUB_STEP_SUMMARY"
          if [ -f "junit/junit-${{ matrix.browser }}.xml" ]; then
            echo "JUnit: junit/junit-${{ matrix.browser }}.xml" >> "$GITHUB_STEP_SUMMARY"
          fi
          if [ -d "playwright-report-${{ matrix.browser }}" ]; then
            echo "HTML report: playwright-report-${{ matrix.browser }}" >> "$GITHUB_STEP_SUMMARY"
          fi

  summary:
    name: E2E (preview) ‚Äì Summary
    needs: [preview, e2e]
    if: >
      always() && needs.preview.result != 'skipped'
    runs-on: ubuntu-latest
    steps:
      - name: Summarize results
        run: |
          echo "## Preview & E2E results" >> $GITHUB_STEP_SUMMARY
          echo "- preview: ${{ needs.preview.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- e2e:     ${{ needs.e2e.result }}"     >> $GITHUB_STEP_SUMMARY
